<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class M_nilai extends CI_Model
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('m_kriteria');
        $this->load->dbforge();
    }

    function hitung()
    {
        $this->create_nilai_preferensi();
        $this->create_nilai_pivot();
        $this->create_nilai_terbobot();
        $this->create_rangking();
    }

    function pivot()
    {
        $all_kriteria = $this->m_kriteria->get_all_kriteria();
        $num_kriteria = $this->m_kriteria->get_num_kriteria();
        $sql = "";
        $i = 1;
        foreach ($all_kriteria as $ak) {
            $opt = ($ak['atribut']=="BEN")?("max"):("min");
            $sql .= "SELECT '{$ak['kode']}' AS `kriteria`, {$opt}(NULLIF(`{$ak['kode']}`,0)) AS `pivot` FROM `list_nilai` ";
            if ($i != $num_kriteria){
                $sql .= "UNION ALL ";
            }
            $i++;
        };

        return $this->db->query($sql)->result_array();
    }

    function proses_nilai()
    {
        $all_kriteria = $this->m_kriteria->get_all_kriteria();
        if ($this->input->post('tipe')=="save"){
            $data = array(
                'nik' => $this->input->post('nik')
            );

            foreach ($all_kriteria as $ak) {
                array_push($data,array("''".$ak['kode']."'" => 'nil'.$ak['kode']));
            }
            return $this->db->insert('list_nilai',$data);


        } else {

            $data = array(
                'nik' => $this->input->post('nik')
            );
            if ($this->input->post('tipe')=="update"){
                foreach ($all_kriteria as $ak) {
                    $data[$ak['kode']] = $this->input->post('nil'.$ak['kode']);
                }
            } else if ($this->input->post('tipe')=="delete"){
                foreach ($all_kriteria as $ak) {
                    $data[$ak['kode']] = 0;
                }
            }

            return $this->db->update('list_nilai',$data,array('nik'=>$this->input->post('nik')));
            // return $data;
            // echo "update";

        }
    }

    function get_nilai($nik='')
    {
      $tahun_kriteria = $this->m_kriteria->get_tahun_kriteria();
      $nilai_pivot = $this->get_nilai_pivot();
      $num_tahun_kriteria = $this->m_kriteria->get_num_tahun_kriteria();
      $all_kriteria = $this->m_kriteria->get_all_kriteria();
      $num_kriteria = $this->m_kriteria->get_num_kriteria();
      $sql = "SELECT ";
      $h = 1;
      // $nik=2019090000;
      foreach ($tahun_kriteria as $tk) {
      		$this->db->like('kode',$tk['tahun']);
      		$kriteria = $this->db->get('list_kriteria')->result_array();
      		$this->db->like('kode',$tk['tahun']);
      		$numkriteria = $this->db->get('list_kriteria')->num_rows();
      		$sql .= "TRUNCATE(( SELECT( ";
      		$i = 1;
      		foreach ($kriteria as $k) {
      				if ($k['atribut']=="BEN"){
      					$sql .= "(`{$k['kode']}`/{$nilai_pivot[$k['kode']]})";
      				} else {
      					$sql .= "({$nilai_pivot[$k['kode']]}/`{$k['kode']}`)";
      				}
      				if ($i!=$numkriteria){
      						$sql .= " + ";
      				}
      				$i++;
      		};
      		$sql .= " )*100/{$numkriteria} FROM `list_nilai` where `nik`='{$nik}'),2) AS `Nil{$tk['tahun']}`";
      		if($h!=$num_tahun_kriteria){
      				$sql .= ", ";
      		}
      		$h++;
      };
      $sql .= ", TRUNCATE(( SELECT( ";
      $j = 1;
      foreach ($all_kriteria as $ak) {
      	if ($ak['atribut']=="BEN"){
      		$sql .= "(`{$ak['kode']}`/{$nilai_pivot[$ak['kode']]})";
      	} else {
      		$sql .= "({$nilai_pivot[$ak['kode']]}/`{$ak['kode']}`)";
      	}
      	if ($j!=$num_kriteria){
      			$sql .= " + ";
      	}
      	$j++;
      }
      $sql .= " )*100/{$num_kriteria} FROM `list_nilai` where `nik`='{$nik}'),2) AS 'NilAll', ";
      $n=1;
      foreach ($tahun_kriteria as $tk) {
      	$this->db->like('kode',$tk['tahun']);
      	$kriteria = $this->db->get('list_kriteria')->result_array();
      	$this->db->like('kode',$tk['tahun']);
      	$numkriteria = $this->db->get('list_kriteria')->num_rows();
      	$sql .= "TRUNCATE( max( ";
      	$i = 1;
      	foreach ($kriteria as $k) {
      			if ($k['atribut']=="BEN"){
      				$sql .= "(`{$k['kode']}`/{$nilai_pivot[$k['kode']]})";
      			} else {
      				$sql .= "({$nilai_pivot[$k['kode']]}/`{$k['kode']}`)";
      			}
      			if ($i!=$numkriteria){
      					$sql .= " + ";
      			}
      			$i++;
      	};
      	$sql .= " )*100/{$numkriteria},2) AS `Max{$tk['tahun']}`";
      	if($n!=$num_tahun_kriteria){
      			$sql .= ", ";
      	}
      	$n++;
      }
      $sql .= ", TRUNCATE( max( ";
      $l = 1;
      foreach ($all_kriteria as $ak) {
      	if ($ak['atribut']=="BEN"){
      		$sql .= "(`{$ak['kode']}`/{$nilai_pivot[$ak['kode']]})";
      	} else {
      		$sql .= "({$nilai_pivot[$ak['kode']]}/`{$ak['kode']}`)";
      	}
      	if ($l!=$num_kriteria){
      			$sql .= " + ";
      	}
      	$l++;
      }
      $sql .= " )*100/{$num_kriteria},2) AS MaxAll FROM `list_nilai`";

      return $this->db->query($sql)->row_array();
    }

    function get_list_nilai()
    {
        return $this->db->get('list_nilai')->result_array();
    }

    function nilai_tiap_tahun($nik='')
    {
        $tahun_kriteria = $this->m_kriteria->get_tahun_kriteria();
        $nilai_pivot = $this->get_nilai_pivot();
        $num_tahun_kriteria = $this->m_kriteria->get_num_tahun_kriteria();
        $sql = "SELECT nik,";
        $h = 1;
        foreach ($tahun_kriteria as $tk) {
            $this->db->like('kode',$tk['tahun']);
            $kriteria = $this->db->get('list_kriteria')->result_array();
            $this->db->like('kode',$tk['tahun']);
            $numkriteria = $this->db->get('list_kriteria')->num_rows();
            $sql .= "TRUNCATE(";
            $i = 1;
            foreach ($kriteria as $k) {
                if($k['atribut']=="BEN"){
                    $sql .= "(`{$k['kode']}`/{$nilai_pivot[$k['kode']]})";
                } else {
                    $sql .= "({$nilai_pivot[$k['kode']]}/`{$k['kode']}`)";
                }
                if ($i!=$numkriteria){
                    $sql .= " + ";
                }
                $i++;
            };
            $sql .= ",2)*100 AS `N{$tk['tahun']}`";
            if($h!=$num_tahun_kriteria){
                $sql .= ", ";
            }
            $h++;
        };
        $sql .= " FROM `list_nilai` where nik='{$nik}'";

        return $this->db->query($sql)->row_array();
    }

    function get_rata($id)
    {
        $all_kriteria = $this->m_kriteria->get_all_kriteria();
        $num_kriteria = $this->m_kriteria->get_num_kriteria();
        $sqls = "SELECT (SELECT ";
        $sql = "(";
        $i=1;
        foreach ($all_kriteria as $ak) {
            $sql .= "`".$ak['kode']."`";
            if ($i!==$num_kriteria){
                $i++;
                $sql .= "+";
            }
        }
        $sql .= ")/3";
        $sqls .= $sql." FROM `list_nilai` where nik='{$id}') AS rata, max({$sql}) AS tertinggi FROM `list_nilai`";
        return $this->db->query($sqls)->row_array();
    }

    function get_nilai_pivot()
    {
        $all_kriteria = $this->m_kriteria->get_all_kriteria();
        $num_kriteria = $this->m_kriteria->get_num_kriteria();
        $sql = "SELECT ";
        $i=1;
        foreach ($all_kriteria as $ak) {
        		$opt = ($ak['atribut']=="BEN")?("max"):("min");
        		$sql .= $opt."(NULLIF(`".$ak['kode']."`,0)) AS ".$ak['kode'];
        		if ($i!==$num_kriteria){
        				$i++;
        				$sql .= ", ";
        		}
        }
        $sql .= " FROM list_nilai";
        return $this->db->query($sql)->row_array();
    }

    function get_nilainya($id)
    {
        return $this->db->get_where('list_nilai',array('nik'=>$id))->row_array();
    }

    function create_nilai_pivot()
    {

        $pivot = $this->pivot();

        $this->dbforge->drop_table('nilai_pivot',TRUE);
        $attributes = array('ENGINE' => 'InnoDB');
        $fields = array('kriteria'  => array(
                                                'type' => 'VARCHAR',
                                                'constraint' => 8
                                          ),
                        'pivot'     => array(
                                                'type' => 'INT',
                                                'constraint' => 3
                                          ));
        $this->dbforge->add_field($fields);
        $this->dbforge->add_key('kriteria', TRUE);
        $this->dbforge->create_table('nilai_pivot', FALSE, $attributes);
        return $this->db->insert_batch('nilai_pivot',$pivot);
    }

    function create_nilai_preferensi()
    {
        $all_kriteria = $this->m_kriteria->get_all_kriteria();
        $nilai_pivot = $this->get_nilai_pivot();
        $num_kriteria = $this->m_kriteria->get_num_kriteria();
        $attributes = array('ENGINE' => 'InnoDB');
        $fields = array('nik'  => array('type' => 'VARCHAR', 'constraint' => 10));

        $sql = "SELECT nik, ";
        $i=1;

        foreach ($all_kriteria as $ak) {
            $fields[$ak['kode']] = array('type' => 'FLOAT', 'constraint' => 3, 'default' => 0);

            if($nilai_pivot[$ak['kode']]==0){
                $sql .= "0 AS {$ak['kode']}";
            } else {
                if ($ak['atribut']=="BEN"){
                    $sql .= "COALESCE((`{$ak['kode']}`/{$nilai_pivot[$ak['kode']]}),0) AS {$ak['kode']}";
                } else {
                    $sql .= "COALESCE(({$nilai_pivot[$ak['kode']]}/`{$ak['kode']}`),0) AS {$ak['kode']}";
                }
            }
            if ($i!==$num_kriteria){
                $i++;
                $sql .= ", ";
            }
        }

        $sql .= " FROM `list_nilai`";

        $this->dbforge->drop_table('nilai_preferensi',TRUE);
        $this->dbforge->add_field($fields);
        $this->dbforge->add_key('nik', TRUE);
        $this->dbforge->create_table('nilai_preferensi', FALSE, $attributes);

        $datanya = $this->db->query($sql)->result_array();

        return $this->db->insert_batch('nilai_preferensi',$datanya);

    }

    function create_nilai_terbobot()
    {
        $num_tahun_kriteria = $this->m_kriteria->get_num_tahun_kriteria();
        $tahun_kriteria = $this->m_kriteria->get_tahun_kriteria();
        $attributes = array('ENGINE' => 'InnoDB');
        $fields = array('nik'  => array('type' => 'VARCHAR', 'constraint' => 10));

        foreach ($tahun_kriteria as $tk) {
            $fields['T'.$tk['tahun']] = array('type' => 'FLOAT', 'constraint' => 3);
        }

        $sql = "SELECT nik,";
        $h = 1;
        foreach ($tahun_kriteria as $tk) {
            $this->db->like('kode',$tk['tahun']);
            $kriteria = $this->db->get('list_kriteria')->result_array();
            $this->db->like('kode',$tk['tahun']);
            $num_kriteria = $this->db->get('list_kriteria')->num_rows();
            $sql .= "TRUNCATE(";
            $i = 1;
            foreach ($kriteria as $k) {
                $sql .= "(`{$k['kode']}`*{$k['bobot']})";
                if ($i!=$num_kriteria){
                    $sql .= " + ";
                }
                $i++;
            };
            $sql .= ",4) AS `T{$tk['tahun']}`";
            if($h!=$num_tahun_kriteria){
                $sql .= ", ";
            }
            $h++;
        };
        $sql .= " FROM `nilai_preferensi`";

        $this->dbforge->drop_table('nilai_terbobot',TRUE);
        $this->dbforge->add_field($fields);
        $this->dbforge->add_key('nik', TRUE);
        $this->dbforge->create_table('nilai_terbobot', FALSE, $attributes);

        $datanya = $this->db->query($sql)->result_array();

        return $this->db->insert_batch('nilai_terbobot',$datanya);
    }

    function create_rangking()
    {
        $num_tahun_kriteria = $this->m_kriteria->get_num_tahun_kriteria();
        $tahun_kriteria = $this->m_kriteria->get_tahun_kriteria();
        $attributes = array('ENGINE' => 'InnoDB');
        $fields = array('nik'  => array('type' => 'VARCHAR', 'constraint' => 10));

        foreach ($tahun_kriteria as $tk) {
            $fields['R'.$tk['tahun']] = array('type' => 'FLOAT', 'constraint' => 3);
        }

        $sql = "SELECT `nik`, ";
        $i=1;
        foreach ($tahun_kriteria as $tk) {
            $sql .= "RANK() OVER (ORDER BY `T{$tk['tahun']}` DESC) AS `R{$tk['tahun']}`";
            if ($i!=$num_tahun_kriteria){
                $sql .= ",";
            }
            $i++;
        }
        $sql .= " FROM `nilai_terbobot`";

        $this->dbforge->drop_table('rangking',TRUE);
        $this->dbforge->add_field($fields);
        $this->dbforge->add_key('nik', TRUE);
        $this->dbforge->create_table('rangking', FALSE, $attributes);

        $datanya = $this->db->query($sql)->result_array();

        return $this->db->insert_batch('rangking',$datanya);

    }

}
